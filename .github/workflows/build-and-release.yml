name: Build and Release

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: portfolio-runners
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get latest tag
      id: get_tag
      run: |
        # Get the latest tag, default to v0.0.0 if none exists
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"
        echo "Latest tag: $LATEST_TAG"
        
    - name: Determine version bump
      id: version_bump
      run: |
        # Get the commit message
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Commit message: $COMMIT_MSG"
        
        # Determine bump type based on commit message
        if [[ $COMMIT_MSG == *"major:"* ]]; then
          BUMP_TYPE="major"
          echo "‚úÖ Found 'major:' prefix - performing major version bump"
        elif [[ $COMMIT_MSG == *"minor:"* ]]; then
          BUMP_TYPE="minor"
          echo "‚úÖ Found 'minor:' prefix - performing minor version bump"
        elif [[ $COMMIT_MSG == *"patch:"* ]]; then
          BUMP_TYPE="patch"
          echo "‚úÖ Found 'patch:' prefix - performing patch version bump"
        else
          BUMP_TYPE="patch"
          echo "‚ÑπÔ∏è  No version prefix found (major:, minor:, patch:) - defaulting to patch bump"
          echo "üí° Tip: Add 'major:', 'minor:', or 'patch:' to your commit message to control version bumping"
        fi
        
        echo "bump_type=$BUMP_TYPE" >> "$GITHUB_OUTPUT"
        echo "üè∑Ô∏è  Version bump type: $BUMP_TYPE"
        
    - name: Calculate new version
      id: new_version
      run: |
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
        
        # Remove 'v' prefix for calculation
        VERSION=${LATEST_TAG#v}
        
        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment based on bump type
        case $BUMP_TYPE in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "patch")
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
        echo "New version: $NEW_VERSION"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: kubernetes
        driver-opts: namespace=github-runners,nodeselector=kubernetes.io/os=linux
        buildkitd-config-inline: |
          [registry."harbor.registry.svc.cluster.local"]
            http = true
            insecure = true
      
    - name: Create Docker config with Harbor credentials
      run: |
        # Create docker config directory
        mkdir -p ~/.docker
        
        # Create auth token (base64 encoded username:password)
        AUTH_TOKEN=$(echo -n "${{ secrets.HARBOR_USERNAME }}:${{ secrets.HARBOR_PASSWORD }}" | base64)
        
        # Create docker config with embedded credentials
        cat > ~/.docker/config.json <<EOF
        {
          "auths": {
            "harbor.registry.svc.cluster.local": {
              "auth": "$AUTH_TOKEN"
            }
          },
          "HttpHeaders": {
            "User-Agent": "Docker-Client/19.03.0 (linux)"
          }
        }
        EOF
        
        echo "Docker config created with Harbor credentials"
        
    - name: Build and push Docker image
      id: build-push
      uses: docker/build-push-action@v5
      with:
        context: ./portfolio-web
        file: ./portfolio-web/Dockerfile
        push: true
        tags: |
          harbor.registry.svc.cluster.local/frontend/portfolio-web:${{ steps.new_version.outputs.new_version }}
        labels: |
          org.opencontainers.image.version=${{ steps.new_version.outputs.new_version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        
    - name: Create and push tag
      id: create-tag
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
        git push origin $NEW_VERSION
        
    - name: Create GitHub Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.new_version.outputs.new_version }}
        release_name: Release ${{ steps.new_version.outputs.new_version }}
        body: |
          üöÄ **Portfolio Web Release ${{ steps.new_version.outputs.new_version }}**
          
          ## Changes
          - Version bump: ${{ steps.version_bump.outputs.bump_type }}
          - Docker image built and pushed to Harbor Registry
          
          ## Docker Image
          - Image: `harbor.registry.svc.cluster.local/frontend/portfolio-web:${{ steps.new_version.outputs.new_version }}`
          
          ## External Access
          - NodePort: `192.168.1.168:30003/frontend/portfolio-web:${{ steps.new_version.outputs.new_version }}`
          
          ## Commit Message
          ```
          ${{ github.event.head_commit.message }}
          ```
        draft: false
        prerelease: false
        
    - name: Summary
      if: always()
      run: |
        # Determine workflow status
        if [ "${{ job.status }}" = "success" ]; then
          echo "## üöÄ Build and Release Complete!" >> $GITHUB_STEP_SUMMARY
          STATUS_ICON="‚úÖ"
          STATUS_TEXT="Completed Successfully"
        elif [ "${{ job.status }}" = "failure" ]; then
          echo "## ‚ùå Build and Release Failed" >> $GITHUB_STEP_SUMMARY
          STATUS_ICON="‚ùå"
          STATUS_TEXT="Failed"
        else
          echo "## ‚ö†Ô∏è Build and Release Incomplete" >> $GITHUB_STEP_SUMMARY
          STATUS_ICON="‚ö†Ô∏è"
          STATUS_TEXT="Incomplete"
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Status** | $STATUS_ICON $STATUS_TEXT |" >> $GITHUB_STEP_SUMMARY
        echo "| **Version** | \`${{ steps.new_version.outputs.new_version || 'Not calculated' }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Bump Type** | ${{ steps.version_bump.outputs.bump_type || 'Not determined' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Registry** | \`harbor.registry.svc.cluster.local\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Repository** | \`frontend/portfolio-web\` |" >> $GITHUB_STEP_SUMMARY
        
        # Only show Docker image info if version was calculated
        if [ -n "${{ steps.new_version.outputs.new_version }}" ]; then
          echo "| **Docker Image** | \`harbor.registry.svc.cluster.local/frontend/portfolio-web:${{ steps.new_version.outputs.new_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **External Access** | \`192.168.1.168:30003/frontend/portfolio-web:${{ steps.new_version.outputs.new_version }}\` |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| **Docker Image** | Not built |" >> $GITHUB_STEP_SUMMARY
          echo "| **External Access** | Not available |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### $STATUS_ICON Status: $STATUS_TEXT" >> $GITHUB_STEP_SUMMARY
        
        # Show what was completed based on job status
        if [ "${{ job.status }}" = "success" ]; then
          echo "- ‚úÖ Docker image built and pushed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Git tag created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ GitHub Release created" >> $GITHUB_STEP_SUMMARY
        else
          echo "**What happened:**" >> $GITHUB_STEP_SUMMARY
          echo "- Version calculation: ${{ steps.new_version.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker build: ${{ steps.build-push.outcome == 'success' && '‚úÖ Success' || steps.build-push.outcome == 'failure' && '‚ùå Failed' || '‚è≠Ô∏è Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Git tag: ${{ steps.create-tag.outcome == 'success' && '‚úÖ Success' || steps.create-tag.outcome == 'failure' && '‚ùå Failed' || '‚è≠Ô∏è Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Release: ${{ steps.create-release.outcome == 'success' && '‚úÖ Success' || steps.create-release.outcome == 'failure' && '‚ùå Failed' || '‚è≠Ô∏è Skipped' }}" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üí° Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Check the failed step logs above for details" >> $GITHUB_STEP_SUMMARY
          echo "- Fix the issue and push another commit to retry" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìö How to Control Version Bumping" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Add one of these prefixes to your commit message to control the version bump:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Prefix | Example | Version Change |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|---------|----------------|" >> $GITHUB_STEP_SUMMARY
        echo "| \`major:\` | \`major: Breaking API changes\` | \`v1.0.0\` ‚Üí \`v2.0.0\` |" >> $GITHUB_STEP_SUMMARY
        echo "| \`minor:\` | \`minor: Add new feature\` | \`v1.0.0\` ‚Üí \`v1.1.0\` |" >> $GITHUB_STEP_SUMMARY
        echo "| \`patch:\` | \`patch: Fix bug in login\` | \`v1.0.0\` ‚Üí \`v1.0.1\` |" >> $GITHUB_STEP_SUMMARY
        echo "| _(none)_ | \`Update documentation\` | \`v1.0.0\` ‚Üí \`v1.0.1\` (default) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Examples:**" >> $GITHUB_STEP_SUMMARY
        echo "- \`major: Redesign user authentication system\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`minor: Add dark mode toggle\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`patch: Fix responsive layout on mobile\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`Update README\` _(will default to patch bump)_" >> $GITHUB_STEP_SUMMARY
