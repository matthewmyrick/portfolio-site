name: Build and Release

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: matthews-macbook-air-matthewmyrick-portfolio-site
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, default to v0.0.0 if none exists
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Determine version bump
        id: version_bump
        run: |
          # Get the commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          # Determine bump type based on commit message
          if [[ $COMMIT_MSG == *"major:"* ]]; then
            BUMP_TYPE="major"
          elif [[ $COMMIT_MSG == *"minor:"* ]]; then
            BUMP_TYPE="minor"
          elif [[ $COMMIT_MSG == *"patch:"* ]]; then
            BUMP_TYPE="patch"
          else
            BUMP_TYPE="patch"  # Default to patch
          fi

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Bump type determined: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"

          # Remove 'v' prefix for calculation
          VERSION=${LATEST_TAG#v}

          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment based on bump type
          case $BUMP_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Build and push with buildah
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"

          # Install only buildah (faster than full podman)
          sudo apt-get update -qq
          sudo apt-get install -y buildah skopeo

          # Build the image
          cd ./portfolio-web
          buildah build --format oci --tag temp-image .

          # Login to Harbor registry
          echo "Harbor12345" | buildah login --username admin --password-stdin --tls-verify=false 192.168.1.168:30003

          # Tag and push using skopeo (better for pushing)
          skopeo copy --dest-tls-verify=false containers-storage:temp-image docker://192.168.1.168:30003/portfolio/portfolio-web:$NEW_VERSION
          skopeo copy --dest-tls-verify=false containers-storage:temp-image docker://192.168.1.168:30003/portfolio/portfolio-web:latest

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
          git push origin $NEW_VERSION

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new_version.outputs.new_version }}
          release_name: Release ${{ steps.new_version.outputs.new_version }}
          body: |
            ðŸš€ **Portfolio Web Release ${{ steps.new_version.outputs.new_version }}**

            ## Changes
            - Version bump: ${{ steps.version_bump.outputs.bump_type }}
            - Docker image built and pushed to Harbor Registry
            - Image available at: `192.168.1.168:30003/portfolio/portfolio-web:${{ steps.new_version.outputs.new_version }}`

            ## Deployment Details
            - Registry: 192.168.1.168:30003
            - Repository: portfolio/portfolio-web
            - Tags: ${{ steps.meta.outputs.tags }}

            ## Commit Message
            ```
            ${{ github.event.head_commit.message }}
            ```
          draft: false
          prerelease: false

      - name: Summary
        run: |
          echo "ðŸš€ Build and Release Complete!"
          echo "Version: ${{ steps.new_version.outputs.new_version }}"
          echo "Bump Type: ${{ steps.version_bump.outputs.bump_type }}"
          echo "Registry: 192.168.1.168:30003"
          echo "Repository: portfolio/portfolio-web"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "ðŸ“¦ GitHub Release created"
